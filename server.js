// Generated by LiveScript 1.4.0
(function(){
  var extractor, aec, taipower, cwbtw, http, request, url, cheerio, iso8601, writeJsonResponse, readTheUrl, linksAsRss, getCwbRainfall10, getCwbRains, pong, port;
  extractor = require('./extractor');
  aec = require('./aec');
  taipower = require('./taipower');
  cwbtw = require('./cwbtw');
  http = require('http');
  request = require('request');
  url = require('url');
  cheerio = require('cheerio');
  iso8601 = require('iso8601');
  writeJsonResponse = function(res, obj, opts){
    res.write(JSON.stringify(obj, 'utf8', opts.pretty && 4 || 0));
    return res.end();
  };
  readTheUrl = curry$(function(url, opts, respond){
    return extractor.extract(url, opts, function(it){
      return respond(it);
    });
  });
  linksAsRss = curry$(function(url, respond){
    return extractor.linksAsRss(url, function(it){
      return respond(it);
    });
  });
  getCwbRainfall10 = function(respond){
    return cwbtw.fetch_rain(function(data){
      return cwbtw.parse_rain(data, function(raw_time, res){
        var time;
        time = iso8601.fromDate(new Date(Date.parse(raw_time + " GMT+0800")));
        return respond(res.map(function(it){
          return {
            time: time,
            station: it[0],
            value: parseFloat(it[1][1])
          };
        }));
      });
    });
  };
  getCwbRains = function(respond){
    return cwbtw.fetch_rain(function(data){
      return cwbtw.parse_rain(data, function(raw_time, res){
        var time;
        time = iso8601.fromDate(new Date(Date.parse(raw_time + " GMT+0800")));
        return respond(res.map(function(it){
          return {
            time: time,
            station: it[0],
            values: it[1].map(function(it){
              return parseFloat(it);
            })
          };
        }));
      });
    });
  };
  pong = function(respond){
    return respond({
      "pong": 1
    });
  };
  port = process.env.PORT || 19000;
  http.createServer(function(req, res){
    var link, f, processed;
    link = url.parse(req.url, true);
    f = null;
    processed = false;
    if (link.pathname === '/read' && link.query.url) {
      f = readTheUrl(link.query.url, link.query);
    } else if (link.pathname === '/aec') {
      f = aec.radiations;
    } else if (link.pathname === '/taipower') {
      f = taipower.radiations;
    } else if (link.pathname === '/cwb.rainfall') {
      f = getCwbRainfall10;
    } else if (link.pathname === '/cwb.rains') {
      f = getCwbRains;
    } else if (link.pathname === '/links2rss' && link.query.url) {
      processed = true;
      linksAsRss(link.query.url, function(it){
        res.write(it);
        return res.end();
      });
    } else if (link.pathname === '/ping') {
      f = pong;
    }
    if (f === null) {
      if (!processed) {
        res.writeHead(404);
        res.end();
      }
    } else {
      f(function(data){
        return writeJsonResponse(res, data, link.query);
      });
    }
  }).listen(port, '127.0.0.1');
  console.log("> http server has started on port " + port);
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
